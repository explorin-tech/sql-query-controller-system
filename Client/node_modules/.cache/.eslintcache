[{"/Users/jaisoni/code/sql-query-controller-system/Client/src/index.js":"1","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/userWindow.js":"2","/Users/jaisoni/code/sql-query-controller-system/Client/src/App.js":"3","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/UserWindow.js":"4","/Users/jaisoni/code/sql-query-controller-system/Client/src/protectedRoutes.js":"5","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/home.js":"6","/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/dashboard.js":"7","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addApplication.js":"8","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addDatabase.js":"9","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/accordion.js":"10","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/card.js":"11","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/addModal.js":"12","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/screenRights.js":"13","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/databaseRights.js":"14","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/logo.js":"15","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/dropDownMenu.js":"16","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/menuItem.js":"17","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/conditionalLink.js":"18","/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/Dashboard.js":"19","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddDatabase.js":"20","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/Home.js":"21","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddApplication.js":"22","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/DropDownMenu.js":"23","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/AddModal.js":"24","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Logo.js":"25","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/ScreenRights.js":"26","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Card.js":"27","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Accordion.js":"28","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/DatabaseRights.js":"29","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/MenuItem.js":"30","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/ConditionalLink.js":"31","/Users/jaisoni/code/sql-query-controller-system/Client/src/utils/ApplicationUrls.js":"32","/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/SignIn.js":"33","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/NavBar.js":"34","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/SideBar.js":"35"},{"size":201,"mtime":1652650189434,"results":"36","hashOfConfig":"37"},{"size":2798,"mtime":1652650189434,"results":"38","hashOfConfig":"37"},{"size":594,"mtime":1652651158652,"results":"39","hashOfConfig":"37"},{"size":2798,"mtime":1652650189434,"results":"40","hashOfConfig":"37"},{"size":403,"mtime":1652650365684,"results":"41","hashOfConfig":"37"},{"size":1055,"mtime":1652650189433,"results":"42","hashOfConfig":"37"},{"size":1397,"mtime":1652651203283,"results":"43","hashOfConfig":"37"},{"size":4763,"mtime":1652650189433,"results":"44","hashOfConfig":"37"},{"size":5467,"mtime":1652650189433,"results":"45","hashOfConfig":"37"},{"size":372,"mtime":1652650189432,"results":"46","hashOfConfig":"37"},{"size":213,"mtime":1652650189431,"results":"47","hashOfConfig":"37"},{"size":930,"mtime":1652650189432,"results":"48","hashOfConfig":"37"},{"size":3062,"mtime":1652650189433,"results":"49","hashOfConfig":"37"},{"size":3058,"mtime":1652650189433,"results":"50","hashOfConfig":"37"},{"size":121,"mtime":1652650189432,"results":"51","hashOfConfig":"37"},{"size":269,"mtime":1652650189432,"results":"52","hashOfConfig":"37"},{"size":414,"mtime":1652650189432,"results":"53","hashOfConfig":"37"},{"size":755,"mtime":1652650189432,"results":"54","hashOfConfig":"37"},{"size":1397,"mtime":1652651203283,"results":"55","hashOfConfig":"37"},{"size":5467,"mtime":1652650189433,"results":"56","hashOfConfig":"37"},{"size":1055,"mtime":1652650189433,"results":"57","hashOfConfig":"37"},{"size":4763,"mtime":1652650189433,"results":"58","hashOfConfig":"37"},{"size":269,"mtime":1652650189432,"results":"59","hashOfConfig":"37"},{"size":930,"mtime":1652650189432,"results":"60","hashOfConfig":"37"},{"size":121,"mtime":1652650189432,"results":"61","hashOfConfig":"37"},{"size":3062,"mtime":1652650189433,"results":"62","hashOfConfig":"37"},{"size":213,"mtime":1652650189431,"results":"63","hashOfConfig":"37"},{"size":372,"mtime":1652650189432,"results":"64","hashOfConfig":"37"},{"size":3058,"mtime":1652650189433,"results":"65","hashOfConfig":"37"},{"size":414,"mtime":1652650189432,"results":"66","hashOfConfig":"37"},{"size":755,"mtime":1652650189432,"results":"67","hashOfConfig":"37"},{"size":323,"mtime":1652651036911,"results":"68","hashOfConfig":"37"},{"size":81,"mtime":1652650189433,"results":"69","hashOfConfig":"37"},{"size":282,"mtime":1652651202325,"results":"70","hashOfConfig":"37"},{"size":1092,"mtime":1652651201606,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nkgmlx",{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"78"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jaisoni/code/sql-query-controller-system/Client/src/index.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/userWindow.js",[],[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/App.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/UserWindow.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/protectedRoutes.js",["185"],[],"import React, { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\n\nexport const ProtectedRoutes = ({ component, ...props }) => {\n  const [authChecked, setAuthCheck] = useState(true);\n  useEffect(() => {\n    // set authChecked true if user is signed in else false and redirect to sign in\n  }, []);\n\n  return <Route {...props} component={authChecked ? component : null} />;\n};\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/home.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/dashboard.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addApplication.js",["186"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/addModal';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Application </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddApplication() {\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Application\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Owner 1</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                    <td>\n                      <span>Owner 2</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Application\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addDatabase.js",["187"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/addModal';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Database </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddDatabase() {\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Database\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application Name</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Type</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Host Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Password</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Connection String</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Port Number</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Database\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/accordion.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/card.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/addModal.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/screenRights.js",["188","189"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function ScreenRights() {\n  const [filteredData, setFilteredData] = useState([]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n  } = tableInstance;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"buttonDiv\">\n          <button className=\"yellowButton\">Edit</button>\n          <button className=\"greenButton\">Save Changes</button>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/databaseRights.js",["190","191"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function DbRights() {\n  const [filteredData, setFilteredData] = useState([]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n  } = tableInstance;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"buttonDiv\">\n          <button className=\"yellowButton\">Edit</button>\n          <button className=\"greenButton\">Save Changes</button>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/logo.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/dropDownMenu.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/menuItem.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/conditionalLink.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/Dashboard.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddDatabase.js",["192"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/AddModal';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Database </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddDatabase() {\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Database\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application Name</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Type</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Host Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Password</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Connection String</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Port Number</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Database\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/Home.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddApplication.js",["193"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/AddModal';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Application </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddApplication() {\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Application\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Owner 1</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                    <td>\n                      <span>Owner 2</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Application\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/DropDownMenu.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/AddModal.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Logo.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/ScreenRights.js",["194","195"],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Card.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Accordion.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/DatabaseRights.js",["196","197"],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/MenuItem.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/ConditionalLink.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/utils/ApplicationUrls.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/SignIn.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/NavBar.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/SideBar.js",[],[],{"ruleId":"198","severity":1,"message":"199","line":5,"column":23,"nodeType":"200","messageId":"201","endLine":5,"endColumn":35},{"ruleId":"198","severity":1,"message":"202","line":19,"column":24,"nodeType":"200","messageId":"201","endLine":19,"endColumn":39},{"ruleId":"198","severity":1,"message":"202","line":19,"column":24,"nodeType":"200","messageId":"201","endLine":19,"endColumn":39},{"ruleId":"198","severity":1,"message":"202","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":39},{"ruleId":"198","severity":1,"message":"203","line":53,"column":5,"nodeType":"200","messageId":"201","endLine":53,"endColumn":10},{"ruleId":"198","severity":1,"message":"202","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":39},{"ruleId":"198","severity":1,"message":"203","line":53,"column":5,"nodeType":"200","messageId":"201","endLine":53,"endColumn":10},{"ruleId":"198","severity":1,"message":"202","line":19,"column":24,"nodeType":"200","messageId":"201","endLine":19,"endColumn":39},{"ruleId":"198","severity":1,"message":"202","line":19,"column":24,"nodeType":"200","messageId":"201","endLine":19,"endColumn":39},{"ruleId":"198","severity":1,"message":"202","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":39},{"ruleId":"198","severity":1,"message":"203","line":53,"column":5,"nodeType":"200","messageId":"201","endLine":53,"endColumn":10},{"ruleId":"198","severity":1,"message":"202","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":39},{"ruleId":"198","severity":1,"message":"203","line":53,"column":5,"nodeType":"200","messageId":"201","endLine":53,"endColumn":10},"no-unused-vars","'setAuthCheck' is assigned a value but never used.","Identifier","unusedVar","'setFilteredData' is assigned a value but never used.","'state' is assigned a value but never used."]