[{"/Users/jaisoni/code/sql-query-controller-system/Client/src/index.js":"1","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/userWindow.js":"2","/Users/jaisoni/code/sql-query-controller-system/Client/src/App.js":"3","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/UserWindow.js":"4","/Users/jaisoni/code/sql-query-controller-system/Client/src/protectedRoutes.js":"5","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/home.js":"6","/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/dashboard.js":"7","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addApplication.js":"8","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addDatabase.js":"9","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/accordion.js":"10","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/card.js":"11","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/addModal.js":"12","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/screenRights.js":"13","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/databaseRights.js":"14","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/logo.js":"15","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/dropDownMenu.js":"16","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/menuItem.js":"17","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/conditionalLink.js":"18","/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/Dashboard.js":"19","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddDatabase.js":"20","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/Home.js":"21","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddApplication.js":"22","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/DropDownMenu.js":"23","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/AddModal.js":"24","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Logo.js":"25","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/ScreenRights.js":"26","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Card.js":"27","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Accordion.js":"28","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/DatabaseRights.js":"29","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/MenuItem.js":"30","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/ConditionalLink.js":"31","/Users/jaisoni/code/sql-query-controller-system/Client/src/utils/ApplicationUrls.js":"32","/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/SignIn.js":"33","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/NavBar.js":"34","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/SideBar.js":"35","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/ConfigureStore.js":"36","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/ApplicationReducer.js":"37","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/DatabaseReducer.js":"38","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/AuthReducer.js":"39","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/UserReducer.js":"40","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/UserPermissionReducer.js":"41","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/ApplicationScreenRightsReducer.js":"42","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/ApplicationScreenReducer.js":"43","/Users/jaisoni/code/sql-query-controller-system/Client/src/utils/BackendUrls.js":"44","/Users/jaisoni/code/sql-query-controller-system/Client/src/store/actions/ActionTypes.js":"45"},{"size":201,"mtime":1652650189434,"results":"46","hashOfConfig":"47"},{"size":2798,"mtime":1652650189434,"results":"48","hashOfConfig":"47"},{"size":736,"mtime":1652700581013,"results":"49","hashOfConfig":"47"},{"size":2824,"mtime":1652807046372,"results":"50","hashOfConfig":"47"},{"size":403,"mtime":1652650365684,"results":"51","hashOfConfig":"47"},{"size":1055,"mtime":1652650189433,"results":"52","hashOfConfig":"47"},{"size":1397,"mtime":1652651203283,"results":"53","hashOfConfig":"47"},{"size":4763,"mtime":1652650189433,"results":"54","hashOfConfig":"47"},{"size":5467,"mtime":1652650189433,"results":"55","hashOfConfig":"47"},{"size":372,"mtime":1652650189432,"results":"56","hashOfConfig":"47"},{"size":213,"mtime":1652650189431,"results":"57","hashOfConfig":"47"},{"size":930,"mtime":1652650189432,"results":"58","hashOfConfig":"47"},{"size":3062,"mtime":1652650189433,"results":"59","hashOfConfig":"47"},{"size":3058,"mtime":1652650189433,"results":"60","hashOfConfig":"47"},{"size":121,"mtime":1652650189432,"results":"61","hashOfConfig":"47"},{"size":269,"mtime":1652650189432,"results":"62","hashOfConfig":"47"},{"size":414,"mtime":1652650189432,"results":"63","hashOfConfig":"47"},{"size":755,"mtime":1652650189432,"results":"64","hashOfConfig":"47"},{"size":1482,"mtime":1652807065763,"results":"65","hashOfConfig":"47"},{"size":5493,"mtime":1652806920017,"results":"66","hashOfConfig":"47"},{"size":1144,"mtime":1652806962917,"results":"67","hashOfConfig":"47"},{"size":5121,"mtime":1652806909590,"results":"68","hashOfConfig":"47"},{"size":299,"mtime":1652806794437,"results":"69","hashOfConfig":"47"},{"size":960,"mtime":1652806746162,"results":"70","hashOfConfig":"47"},{"size":178,"mtime":1652806833957,"results":"71","hashOfConfig":"47"},{"size":3088,"mtime":1652807009751,"results":"72","hashOfConfig":"47"},{"size":266,"mtime":1652806880710,"results":"73","hashOfConfig":"47"},{"size":402,"mtime":1652806762959,"results":"74","hashOfConfig":"47"},{"size":3084,"mtime":1652806930756,"results":"75","hashOfConfig":"47"},{"size":469,"mtime":1652806855341,"results":"76","hashOfConfig":"47"},{"size":818,"mtime":1652806785183,"results":"77","hashOfConfig":"47"},{"size":323,"mtime":1652651036911,"results":"78","hashOfConfig":"47"},{"size":111,"mtime":1652807078238,"results":"79","hashOfConfig":"47"},{"size":335,"mtime":1652806994886,"results":"80","hashOfConfig":"47"},{"size":1205,"mtime":1652807030431,"results":"81","hashOfConfig":"47"},{"size":917,"mtime":1652736560097,"results":"82","hashOfConfig":"47"},{"size":569,"mtime":1652735755407,"results":"83","hashOfConfig":"47"},{"size":537,"mtime":1652735772894,"results":"84","hashOfConfig":"47"},{"size":838,"mtime":1652727585567,"results":"85","hashOfConfig":"47"},{"size":513,"mtime":1652735778789,"results":"86","hashOfConfig":"47"},{"size":401,"mtime":1652736170311,"results":"87","hashOfConfig":"47"},{"size":410,"mtime":1652736093513,"results":"88","hashOfConfig":"47"},{"size":388,"mtime":1652735859849,"results":"89","hashOfConfig":"47"},{"size":1962,"mtime":1652704315969,"results":"90","hashOfConfig":"47"},{"size":817,"mtime":1652736232312,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"1nkgmlx",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"99"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"99"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"99"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"99"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"106"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"106"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"106"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"/Users/jaisoni/code/sql-query-controller-system/Client/src/index.js",[],[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/userWindow.js",[],[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/App.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/UserWindow.js",[],[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/protectedRoutes.js",["239"],[],"import React, { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\n\nexport const ProtectedRoutes = ({ component, ...props }) => {\n  const [authChecked, setAuthCheck] = useState(true);\n  useEffect(() => {\n    // set authChecked true if user is signed in else false and redirect to sign in\n  }, []);\n\n  return <Route {...props} component={authChecked ? component : null} />;\n};\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/home.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/dashboard.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addApplication.js",["240"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/addModal';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Application </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddApplication() {\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Application\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Owner 1</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                    <td>\n                      <span>Owner 2</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Application\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/addDatabase.js",["241"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/addModal';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Database </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddDatabase() {\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Database\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application Name</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Type</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Host Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Password</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Connection String</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Port Number</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Database\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/accordion.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/card.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/addModal.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/screenRights.js",["242","243"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function ScreenRights() {\n  const [filteredData, setFilteredData] = useState([]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n  } = tableInstance;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"buttonDiv\">\n          <button className=\"yellowButton\">Edit</button>\n          <button className=\"greenButton\">Save Changes</button>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/databaseRights.js",["244","245"],[],"import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function DbRights() {\n  const [filteredData, setFilteredData] = useState([]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n  } = tableInstance;\n\n  return (\n    <>\n      <div className=\"application\">\n        <div className=\"buttonDiv\">\n          <button className=\"yellowButton\">Edit</button>\n          <button className=\"greenButton\">Save Changes</button>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/logo.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/dropDownMenu.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/menuItem.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/conditionalLink.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/Dashboard.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddDatabase.js",["246"],[],"import React, { useMemo, useState, Fragment } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/AddModal';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Database </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddDatabase() {\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <Fragment>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Database\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application Name</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Type</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Host Name</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Password</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Database Connection String</span>\n                      <input type=\"text\" />\n                    </td>\n                    <td>\n                      <span>Database Port Number</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Database\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/components/Home.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/AddApplication.js",["247"],[],"import React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { useTable, useGlobalFilter, useSortBy } from 'react-table';\nimport AddModal from '../common/AddModal';\n\nimport axios from 'axios';\n\nimport * as BACKEND_URLS from '../utils/BackendUrls';\n\nfunction GlobalFilter({ filter, setFilter }) {\n  return (\n    <span className=\"searchTable\">\n      <span className=\"headData\"> Application </span>{' '}\n      <input\n        value={filter || ''}\n        onChange={(e) => setFilter(e.target.value)}\n        placeholder=\"  Search\"\n      />\n    </span>\n  );\n}\n\nexport default function AddApplication() {\n  useEffect(() => {\n    axios({\n      method: 'get',\n      url: BACKEND_URLS.GET_ALL_APPLCIATIONS_FOR_AN_USER,\n      params: {\n        user_id: 1,\n      },\n    }).then(function (response) {\n      console.log(response);\n    });\n  }, []);\n\n  const [filteredData, setFilteredData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useGlobalFilter,\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setGlobalFilter,\n    state,\n  } = tableInstance;\n\n  const { globalFilter } = state;\n\n  return (\n    <Fragment>\n      <div className=\"application\">\n        <div className=\"appTab\">\n          <div>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n          </div>\n          <AddModal\n            modalShow={modalShow}\n            setModalShow={setModalShow}\n            title=\"Add Application\"\n          >\n            <form>\n              <table>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span>Application</span>\n                      <input type=\"text\" />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span>Owner 1</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                    <td>\n                      <span>Owner 2</span>\n                      <select>\n                        <option>A</option>\n                        <option>B</option>\n                      </select>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </form>\n          </AddModal>\n          <div>\n            <button className=\"blueButton\" onClick={() => setModalShow(true)}>\n              <i className=\"fas fa-plus\"></i> Add Application\n            </button>\n          </div>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/DropDownMenu.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/AddModal.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Logo.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/ScreenRights.js",["248","249"],[],"import React, { useMemo, useState, Fragment } from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function ScreenRights() {\n  const [filteredData, setFilteredData] = useState([]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n  } = tableInstance;\n\n  return (\n    <Fragment>\n      <div className=\"application\">\n        <div className=\"buttonDiv\">\n          <button className=\"yellowButton\">Edit</button>\n          <button className=\"greenButton\">Save Changes</button>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Card.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/Accordion.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/DatabaseRights.js",["250","251"],[],"import React, { useMemo, useState, Fragment } from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nexport default function DbRights() {\n  const [filteredData, setFilteredData] = useState([]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 2',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 3',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 4',\n        accessor: '',\n        filterable: true,\n      },\n      {\n        Header: 'Column 5',\n        accessor: '',\n        filterable: true,\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => filteredData, [filteredData]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n  } = tableInstance;\n\n  return (\n    <Fragment>\n      <div className=\"application\">\n        <div className=\"buttonDiv\">\n          <button className=\"yellowButton\">Edit</button>\n          <button className=\"greenButton\">Save Changes</button>\n        </div>\n        <div className=\"selectTable\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  key={headerGroup.id}\n                  className=\"tableHeading\"\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                    >\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? (\n                            <i className=\"fas fa-angle-down sortIcon\"></i>\n                          ) : (\n                            <i className=\"fas fa-angle-up sortIcon\"></i>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()} key={row.id}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()} key={cell.value}>\n                          {cell.render('Cell')}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n","/Users/jaisoni/code/sql-query-controller-system/Client/src/common/MenuItem.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/common/ConditionalLink.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/utils/ApplicationUrls.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/containers/SignIn.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/NavBar.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/components/SideBar.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/ConfigureStore.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/ApplicationReducer.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/DatabaseReducer.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/AuthReducer.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/UserReducer.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/UserPermissionReducer.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/ApplicationScreenRightsReducer.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/reducers/ApplicationScreenReducer.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/utils/BackendUrls.js",[],[],"/Users/jaisoni/code/sql-query-controller-system/Client/src/store/actions/ActionTypes.js",[],[],{"ruleId":"252","severity":1,"message":"253","line":5,"column":23,"nodeType":"254","messageId":"255","endLine":5,"endColumn":35},{"ruleId":"252","severity":1,"message":"256","line":19,"column":24,"nodeType":"254","messageId":"255","endLine":19,"endColumn":39},{"ruleId":"252","severity":1,"message":"256","line":19,"column":24,"nodeType":"254","messageId":"255","endLine":19,"endColumn":39},{"ruleId":"252","severity":1,"message":"256","line":5,"column":24,"nodeType":"254","messageId":"255","endLine":5,"endColumn":39},{"ruleId":"252","severity":1,"message":"257","line":53,"column":5,"nodeType":"254","messageId":"255","endLine":53,"endColumn":10},{"ruleId":"252","severity":1,"message":"256","line":5,"column":24,"nodeType":"254","messageId":"255","endLine":5,"endColumn":39},{"ruleId":"252","severity":1,"message":"257","line":53,"column":5,"nodeType":"254","messageId":"255","endLine":53,"endColumn":10},{"ruleId":"252","severity":1,"message":"256","line":19,"column":24,"nodeType":"254","messageId":"255","endLine":19,"endColumn":39},{"ruleId":"252","severity":1,"message":"256","line":35,"column":24,"nodeType":"254","messageId":"255","endLine":35,"endColumn":39},{"ruleId":"252","severity":1,"message":"256","line":5,"column":24,"nodeType":"254","messageId":"255","endLine":5,"endColumn":39},{"ruleId":"252","severity":1,"message":"257","line":53,"column":5,"nodeType":"254","messageId":"255","endLine":53,"endColumn":10},{"ruleId":"252","severity":1,"message":"256","line":5,"column":24,"nodeType":"254","messageId":"255","endLine":5,"endColumn":39},{"ruleId":"252","severity":1,"message":"257","line":53,"column":5,"nodeType":"254","messageId":"255","endLine":53,"endColumn":10},"no-unused-vars","'setAuthCheck' is assigned a value but never used.","Identifier","unusedVar","'setFilteredData' is assigned a value but never used.","'state' is assigned a value but never used."]